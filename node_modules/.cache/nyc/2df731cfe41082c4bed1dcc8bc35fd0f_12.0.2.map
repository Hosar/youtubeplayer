{"version":3,"sources":["youtube.js"],"names":["config","axios","Axios","create","baseURL","youtubeApi","endpoint","YoutubeService","countryCode","getVideosByCountry","then","trendingVideos","data","items","formatVideoItems","getDetails","params","part","chart","regionCode","maxResults","key","get","trendingVideosInfo","i","length","videoInfo","id","title","snippet","thumbnail","thumbnails","high","url","publishedAt","fromNow","push","videosInfo","videosWithDetails","map","getCountsDetails","_video","Promise","resolve","reject","getVideoCounts","videoWithCountsInfo","Object","assign","counts","catch","video","all","videoId","res","result","viewCount","statistics","likeCount"],"mappings":";;;;;;;;;AAAA;;;;AACA;;IAAYA,M;;AACZ;;;;AACA;;AACA;;;;;;;;AAEA,IAAMC,QAAQC,gBAAMC,MAAN,CAAa;AACzBC,WAASJ,OAAOK,UAAP,CAAkBC;AADF,CAAb,CAAd;;IAIaC,c,WAAAA,c;;;;;;;sCACOC,W,EAAa;;AAE7B,aAAO,KAAKC,kBAAL,CAAwBD,WAAxB,EACKE,IADL,CACU;AAAA,eAAkBC,eAAeC,IAAf,CAAoBC,KAAtC;AAAA,OADV,EAEKH,IAFL,CAEU,KAAKI,gBAFf,EAGKJ,IAHL,CAGU,KAAKK,UAHf,CAAP;AAIA;AACA;AACD;;;uCAEkBP,W,EAAY;AAC7B,UAAMQ,SAAS;AACbC,cAAM,SADO;AAEbC,eAAO,aAFM;AAGbC,oBAAYX,WAHC,EAGY;AACzBY,oBAAY,IAJC;AAKbC,aAAKrB,OAAOK,UAAP,CAAkBgB;AALV,OAAf;;AAQA,aAAOpB,MAAMqB,GAAN,CAAU,GAAV,EAAe,EAACN,cAAD,EAAf,CAAP;AACD;;;qCAEgBL,c,EAAgB;AAC/B,UAAMY,qBAAqB,EAA3B;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIb,eAAec,MAAnC,EAA2CD,GAA3C,EAAgD;AAC9C,YAAME,YAAY;AAChBC,cAAIhB,eAAea,CAAf,EAAkBG,EADN;AAEhBC,iBAAOjB,eAAea,CAAf,EAAkBK,OAAlB,CAA0BD,KAFjB;AAGhBE,qBAAWnB,eAAea,CAAf,EAAkBK,OAAlB,CAA0BE,UAA1B,CAAqCC,IAArC,CAA0CC,GAHrC;AAIhBC,uBAAa,sBAAOvB,eAAea,CAAf,EAAkBK,OAAlB,CAA0BK,WAAjC,EAA8CC,OAA9C;AAJG,SAAlB;AAMAZ,2BAAmBa,IAAnB,CAAwBV,SAAxB;AACD;AACD,aAAOH,kBAAP;AACD;;;+BAEUc,U,EAAY;AACnB,UAAMC,oBAAoBD,WAAWE,GAAX,CAAe,iBAAS;AAChD,YAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,MAAD;AAAA,iBAAY,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACzErC,2BAAesC,cAAf,CAA8BJ,OAAOd,EAArC,EAAyCjB,IAAzC,CAA8C,kBAAU;AACtD,kBAAMoC,sBAAsBC,OAAOC,MAAP,CAAc,EAAd,EAAkBP,MAAlB,EAA0BQ,MAA1B,CAA5B;AACAN,sBAAQG,mBAAR;AACD,aAHD,EAGGI,KAHH,CAGSN,MAHT;AAID,WALoC,CAAZ;AAAA,SAAzB;;AAOA,eAAOJ,iBAAiBW,KAAjB,CAAP;AACD,OATyB,CAA1B;;AAWA,aAAOT,QAAQU,GAAR,CAAYd,iBAAZ,CAAP;AACH;;;mCAEqBe,O,EAAS;AAC7B,UAAMrC,SAAS;AACbC,cAAM,YADO;AAEbU,YAAI0B,OAFS;AAGbhC,aAAKrB,OAAOK,UAAP,CAAkBgB;AAHV,OAAf;;AAMA,aAAOpB,MAAMqB,GAAN,CAAU,GAAV,EAAe,EAACN,cAAD,EAAf,EAAyBN,IAAzB,CAA8B,UAAS4C,GAAT,EAAc;AACjD,YAAMC,SAASD,IAAI1C,IAAnB;AACA,YAAM4C,YAAYD,OAAO,OAAP,EAAgB,CAAhB,EAAmBE,UAAnB,CAA8BD,SAAhD;AACA,YAAME,YAAYH,OAAO,OAAP,EAAgB,CAAhB,EAAmBE,UAAnB,CAA8BC,SAAhD;;AAEA,eAAO;AACLF,8BADK;AAELE;AAFK,SAAP;AAID,OATM,CAAP;AAUD","file":"youtube.js","sourceRoot":"/home/hosar/Projects/youtube-trends-node/Code/services","sourcesContent":["import Axios from 'axios';\nimport * as config from '../config.json';\nimport moment from \"moment\";\nimport { access } from 'fs';\nimport { resolve } from 'url';\n\nconst axios = Axios.create({\n  baseURL: config.youtubeApi.endpoint\n});\n\nexport class YoutubeService {\n  getTrendingVideos(countryCode) {\n    \n    return this.getVideosByCountry(countryCode)\n               .then(trendingVideos => trendingVideos.data.items)\n               .then(this.formatVideoItems)\n               .then(this.getDetails)\n    // return axios.get('/', {params}).then(this.formatVideoItems).then(this.getDetails);\n    // return axios.get('/', {params}).then(this.formatVideoItems);\n  }\n\n  getVideosByCountry(countryCode){\n    const params = {\n      part: 'snippet',\n      chart: 'mostPopular',\n      regionCode: countryCode, // should be replaced with country code from countryList\n      maxResults: '24',\n      key: config.youtubeApi.key\n    };\n\n    return axios.get('/', {params});\n  }\n\n  formatVideoItems(trendingVideos) {\n    const trendingVideosInfo = [];\n    for (let i = 0; i < trendingVideos.length; i++) {\n      const videoInfo = {\n        id: trendingVideos[i].id,\n        title: trendingVideos[i].snippet.title,\n        thumbnail: trendingVideos[i].snippet.thumbnails.high.url,\n        publishedAt: moment(trendingVideos[i].snippet.publishedAt).fromNow()\n      };\n      trendingVideosInfo.push(videoInfo);      \n    }\n    return trendingVideosInfo;\n  }\n\n  getDetails(videosInfo) {\n      const videosWithDetails = videosInfo.map(video => {\n        const getCountsDetails = (_video) => new Promise(function(resolve, reject) {\n          YoutubeService.getVideoCounts(_video.id).then(counts => {\n            const videoWithCountsInfo = Object.assign({}, _video, counts) \n            resolve(videoWithCountsInfo)\n          }).catch(reject);          \n        })\n      \n        return getCountsDetails(video);\n      });\n\n      return Promise.all(videosWithDetails);\n  }\n\n  static getVideoCounts(videoId) {\n    const params = {\n      part: 'statistics',\n      id: videoId,\n      key: config.youtubeApi.key\n    };\n\n    return axios.get('/', {params}).then(function(res) {\n      const result = res.data;\n      const viewCount = result['items'][0].statistics.viewCount;\n      const likeCount = result['items'][0].statistics.likeCount;\n\n      return {\n        viewCount,\n        likeCount\n      };\n    });\n  }\n}\n"]}