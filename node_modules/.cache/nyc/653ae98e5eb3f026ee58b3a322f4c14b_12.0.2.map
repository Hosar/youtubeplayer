{"version":3,"sources":["youtube.js"],"names":["config","axios","Axios","create","baseURL","youtubeApi","endpoint","YoutubeService","countryCode","params","part","chart","regionCode","maxResults","key","get","trendingVideos","trendingVideosInfo","i","length","videoInfo","id","title","snippet","thumbnail","thumbnails","high","url","publishedAt","fromNow","push","videosInfo","videosWithDetails","map","getCountsDetails","_video","Promise","resolve","reject","getVideoCounts","then","videoWithCountsInfo","Object","assign","counts","catch","video","all","videoId","res","result","data","viewCount","statistics","likeCount"],"mappings":";;;;;;;;;AAAA;;;;AACA;;IAAYA,M;;AACZ;;;;AACA;;AACA;;;;;;;;AAEA,IAAMC,QAAQC,gBAAMC,MAAN,CAAa;AACzBC,WAASJ,OAAOK,UAAP,CAAkBC;AADF,CAAb,CAAd;;IAIaC,c,WAAAA,c;;;;;;;sCACOC,W,EAAa;AAC7B,UAAMC,SAAS;AACbC,cAAM,SADO;AAEbC,eAAO,aAFM;AAGbC,oBAAYJ,WAHC,EAGY;AACzBK,oBAAY,IAJC;AAKbC,aAAKd,OAAOK,UAAP,CAAkBS;AALV,OAAf;;AAQA,aAAOb,MAAMc,GAAN,CAAU,GAAV,EAAe,EAACN,cAAD,EAAf,CAAP;AACA;AACA;AACD;;;qCAEgBO,c,EAAgB;AAC/B,UAAMC,qBAAqB,EAA3B;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,eAAeG,MAAnC,EAA2CD,GAA3C,EAAgD;AAC9C,YAAME,YAAY;AAChBC,cAAIL,eAAeE,CAAf,EAAkBG,EADN;AAEhBC,iBAAON,eAAeE,CAAf,EAAkBK,OAAlB,CAA0BD,KAFjB;AAGhBE,qBAAWR,eAAeE,CAAf,EAAkBK,OAAlB,CAA0BE,UAA1B,CAAqCC,IAArC,CAA0CC,GAHrC;AAIhBC,uBAAa,sBAAOZ,eAAeE,CAAf,EAAkBK,OAAlB,CAA0BK,WAAjC,EAA8CC,OAA9C;AAJG,SAAlB;AAMAZ,2BAAmBa,IAAnB,CAAwBV,SAAxB;AACD;AACD,aAAOH,kBAAP;AACD;;;+BAEUc,U,EAAY;AACnB,UAAMC,oBAAoBD,WAAWE,GAAX,CAAe,iBAAS;AAChD,YAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,MAAD;AAAA,iBAAY,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACzE/B,2BAAegC,cAAf,CAA8BJ,OAAOd,EAArC,EAAyCmB,IAAzC,CAA8C,kBAAU;AACtD,kBAAMC,sBAAsBC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,MAAlB,EAA0BS,MAA1B,CAA5B;AACAP,sBAAQI,mBAAR;AACD,aAHD,EAGGI,KAHH,CAGSP,MAHT;AAID,WALoC,CAAZ;AAAA,SAAzB;;AAOA,eAAOJ,iBAAiBY,KAAjB,CAAP;AACD,OATyB,CAA1B;;AAWA,aAAOV,QAAQW,GAAR,CAAYf,iBAAZ,CAAP;AACH;;;mCAEqBgB,O,EAAS;AAC7B,UAAMvC,SAAS;AACbC,cAAM,YADO;AAEbW,YAAI2B,OAFS;AAGblC,aAAKd,OAAOK,UAAP,CAAkBS;AAHV,OAAf;;AAMA,aAAOb,MAAMc,GAAN,CAAU,GAAV,EAAe,EAACN,cAAD,EAAf,EAAyB+B,IAAzB,CAA8B,UAASS,GAAT,EAAc;AACjD,YAAMC,SAASD,IAAIE,IAAnB;AACA,YAAMC,YAAYF,OAAO,OAAP,EAAgB,CAAhB,EAAmBG,UAAnB,CAA8BD,SAAhD;AACA,YAAME,YAAYJ,OAAO,OAAP,EAAgB,CAAhB,EAAmBG,UAAnB,CAA8BC,SAAhD;;AAEA,eAAO;AACLF,8BADK;AAELE;AAFK,SAAP;AAID,OATM,CAAP;AAUD","file":"youtube.js","sourceRoot":"/home/hosar/Projects/youtube-trends-node/Code/services","sourcesContent":["import Axios from 'axios';\nimport * as config from '../config.json';\nimport moment from \"moment\";\nimport { access } from 'fs';\nimport { resolve } from 'url';\n\nconst axios = Axios.create({\n  baseURL: config.youtubeApi.endpoint\n});\n\nexport class YoutubeService {\n  getTrendingVideos(countryCode) {\n    const params = {\n      part: 'snippet',\n      chart: 'mostPopular',\n      regionCode: countryCode, // should be replaced with country code from countryList\n      maxResults: '24',\n      key: config.youtubeApi.key\n    };\n\n    return axios.get('/', {params});\n    // return axios.get('/', {params}).then(this.formatVideoItems).then(this.getDetails);\n    // return axios.get('/', {params}).then(this.formatVideoItems);\n  }\n\n  formatVideoItems(trendingVideos) {\n    const trendingVideosInfo = [];\n    for (let i = 0; i < trendingVideos.length; i++) {\n      const videoInfo = {\n        id: trendingVideos[i].id,\n        title: trendingVideos[i].snippet.title,\n        thumbnail: trendingVideos[i].snippet.thumbnails.high.url,\n        publishedAt: moment(trendingVideos[i].snippet.publishedAt).fromNow()\n      };\n      trendingVideosInfo.push(videoInfo);      \n    }\n    return trendingVideosInfo;\n  }\n\n  getDetails(videosInfo) {\n      const videosWithDetails = videosInfo.map(video => {\n        const getCountsDetails = (_video) => new Promise(function(resolve, reject) {\n          YoutubeService.getVideoCounts(_video.id).then(counts => {\n            const videoWithCountsInfo = Object.assign({}, _video, counts) \n            resolve(videoWithCountsInfo)\n          }).catch(reject);          \n        })\n      \n        return getCountsDetails(video);\n      });\n\n      return Promise.all(videosWithDetails);\n  }\n\n  static getVideoCounts(videoId) {\n    const params = {\n      part: 'statistics',\n      id: videoId,\n      key: config.youtubeApi.key\n    };\n\n    return axios.get('/', {params}).then(function(res) {\n      const result = res.data;\n      const viewCount = result['items'][0].statistics.viewCount;\n      const likeCount = result['items'][0].statistics.likeCount;\n\n      return {\n        viewCount,\n        likeCount\n      };\n    });\n  }\n}\n"]}