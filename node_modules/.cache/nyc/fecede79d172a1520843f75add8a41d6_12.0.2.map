{"version":3,"sources":["youtube.js"],"names":["config","axios","Axios","create","baseURL","youtubeApi","endpoint","YoutubeService","countryCode","params","part","chart","regionCode","maxResults","key","get","then","formatVideoItems","trendingVideos","trendingVideosInfo","i","length","videoInfo","id","title","snippet","thumbnail","thumbnails","high","url","publishedAt","fromNow","push","videosInfo","videosWithDetails","map","video","details","getVideoCounts","reduce","acc","val","console","log","r","Promise","resolve","videoId","res","result","data","viewCount","statistics","likeCount"],"mappings":";;;;;;;;;AAAA;;;;AACA;;IAAYA,M;;AACZ;;;;AACA;;AACA;;;;;;;;;;AAEA,IAAMC,QAAQC,gBAAMC,MAAN,CAAa;AACzBC,WAASJ,OAAOK,UAAP,CAAkBC;AADF,CAAb,CAAd;;IAIaC,c,WAAAA,c;;;;;;;sCACOC,W,EAAa;AAC7B,UAAMC,SAAS;AACbC,cAAM,SADO;AAEbC,eAAO,aAFM;AAGbC,oBAAYJ,WAHC,EAGY;AACzBK,oBAAY,IAJC;AAKbC,aAAKd,OAAOK,UAAP,CAAkBS;AALV,OAAf;;AASA,aAAOb,MAAMc,GAAN,CAAU,GAAV,EAAe,EAACN,cAAD,EAAf,EAAyBO,IAAzB,CAA8B,KAAKC,gBAAnC,CAAP;AACA;;;;;;;;;;;;;AAeD;;;qCAEgBC,c,EAAgB;AAC/B,UAAMC,qBAAqB,EAA3B;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,eAAeG,MAAnC,EAA2CD,GAA3C,EAAgD;AAC9C,YAAME,YAAY;AAChBC,cAAIL,eAAeE,CAAf,EAAkBG,EADN;AAEhBC,iBAAON,eAAeE,CAAf,EAAkBK,OAAlB,CAA0BD,KAFjB;AAGhBE,qBAAWR,eAAeE,CAAf,EAAkBK,OAAlB,CAA0BE,UAA1B,CAAqCC,IAArC,CAA0CC,GAHrC;AAIhBC,uBAAa,sBAAOZ,eAAeE,CAAf,EAAkBK,OAAlB,CAA0BK,WAAjC,EAA8CC,OAA9C;AAJG,SAAlB;AAMAZ,2BAAmBa,IAAnB,CAAwBV,SAAxB;AACD;AACD,aAAOH,kBAAP;AACD;;;;0FAEgBc,U;;;;;;;;AACf;AACQC,iC,GAAoBD,WAAWE,GAAX,CAAe,iBAAS;AAChDC,wBAAMC,OAAN,GAAgB,MAAKC,cAAL,CAAoBF,MAAMb,EAA1B,CAAhB;AACA,yBAAOa,KAAP;AACA;AACD,iBAJyB,C;iDAMnBF,kBAAkBK,MAAlB,CAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5CC,0BAAQC,GAAR,CAAY,aAAZ;AACAF,sBAAIJ,OAAJ,CAAYrB,IAAZ,CAAiB,aAAK;AACpB0B,4BAAQC,GAAR,CAAY,QAAZ;AACAD,4BAAQC,GAAR,CAAYC,CAAZ;AACAJ,wBAAII,CAAJ;AACD,mBAJD,EAIGC,QAAQC,OAJX;AAKD,iBAPM,C;;;;;;;;;;;;;;;;;;mCA8BIC,O,EAAS;AACtB,UAAMtC,SAAS;AACbC,cAAM,YADO;AAEba,YAAIwB,OAFS;AAGbjC,aAAKd,OAAOK,UAAP,CAAkBS;AAHV,OAAf;;AAMA,aAAOb,MAAMc,GAAN,CAAU,GAAV,EAAe,EAACN,cAAD,EAAf,EAAyBO,IAAzB,CAA8B,UAASgC,GAAT,EAAc;AACjD,YAAMC,SAASD,IAAIE,IAAnB;AACA,YAAMC,YAAYF,OAAO,OAAP,EAAgB,CAAhB,EAAmBG,UAAnB,CAA8BD,SAAhD;AACA,YAAME,YAAYJ,OAAO,OAAP,EAAgB,CAAhB,EAAmBG,UAAnB,CAA8BC,SAAhD;;AAEA,eAAO;AACLF,8BADK;AAELE;AAFK,SAAP;AAID,OATM,CAAP;AAUD","file":"youtube.js","sourceRoot":"/home/hosar/Projects/youtube-trends-node/Code/services","sourcesContent":["import Axios from 'axios';\nimport * as config from '../config.json';\nimport moment from \"moment\";\nimport { access } from 'fs';\nimport { resolve } from 'url';\n\nconst axios = Axios.create({\n  baseURL: config.youtubeApi.endpoint\n});\n\nexport class YoutubeService {\n  getTrendingVideos(countryCode) {\n    const params = {\n      part: 'snippet',\n      chart: 'mostPopular',\n      regionCode: countryCode, // should be replaced with country code from countryList\n      maxResults: '24',\n      key: config.youtubeApi.key\n    };\n\n\n    return axios.get('/', {params}).then(this.formatVideoItems)\n    /*return axios.get('/', {params}).then(function(res){\n      result = res.data.items;\n      for (let i = 0; i < result.length; i++) {\n        result[i] = {\n          id: result[i].id,\n          title: result[i].snippet.title,\n          thumbnail: result[i].snippet.thumbnails.high.url,\n          publishedAt: moment(result[i].snippet.publishedAt).fromNow()\n        };\n        result[i] = YoutubeService.getVideoDetails(result[i]);\n      }\n\n      return result;\n    });*/\n\n  }\n\n  formatVideoItems(trendingVideos) {\n    const trendingVideosInfo = [];\n    for (let i = 0; i < trendingVideos.length; i++) {\n      const videoInfo = {\n        id: trendingVideos[i].id,\n        title: trendingVideos[i].snippet.title,\n        thumbnail: trendingVideos[i].snippet.thumbnails.high.url,\n        publishedAt: moment(trendingVideos[i].snippet.publishedAt).fromNow()\n      };\n      trendingVideosInfo.push(videoInfo);      \n    }\n    return trendingVideosInfo;\n  }\n\n  async getDetails(videosInfo) {\n    // return new Promise((resolve, reject) => {\n      const videosWithDetails = videosInfo.map(video => {\n        video.details = this.getVideoCounts(video.id)\n        return video;\n        // return this.getVideoCounts(video.id);\n      });\n\n      return videosWithDetails.reduce((acc, val) => {\n        console.log('REDUCEEEEEE');\n        val.details.then(r => {\n          console.log('inside');\n          console.log(r);\n          acc(r)\n        }, Promise.resolve)\n      })\n      //return Promise.all(videosWithDetails)\n      /*const applyAsync = (acc, val) => {\n        console.log('val...:');\n        console.log(val.details);\n        val.details.then(x => {\n          console.log('x');\n          console.log(x);\n\n           val.details = x;\n           acc.push(val);\n           acc.resolve()\n        })\n      };\n       \n      videosWithDetails.reduce(applyAsync, new Promise()).then(\n\n      )\n      resolve(v)*/\n    //})\n    \n  }\n\n  getVideoCounts(videoId) {\n    const params = {\n      part: 'statistics',\n      id: videoId,\n      key: config.youtubeApi.key\n    };\n\n    return axios.get('/', {params}).then(function(res) {\n      const result = res.data;\n      const viewCount = result['items'][0].statistics.viewCount;\n      const likeCount = result['items'][0].statistics.likeCount;\n\n      return {\n        viewCount,\n        likeCount\n      };\n    });\n  }\n}\n"]}